trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - .editorconfig
    - .gitignore
    - LICENSE
    - mkdocs.yml
    - docs/*
    - theme/*

pr:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
    - .editorconfig
    - .gitignore
    - LICENSE
    - mkdocs.yml
    - docs/*
    - theme/*

name: $(Build.BuildId)

variables:
- name: VMImage
  value: 'windows-latest'
- name: BuildConfiguration
  value: Release
- group: 'Code Signing'

stages:
- stage: build
  displayName: Build NuGet Packages
  jobs:
  - job: buildJob
    displayName: Build Container Extensions
    pool:
      vmImage: $(VMImage)
      demands:
      - MSBuild
      - Xamarin.Android
      - JDK
      - AndroidSDK
    steps:
    - checkout: self
      clean: true
      lfs: true
      submodules: true

    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        useGlobalJson: true

    - task: NuGetToolInstaller@1
      displayName: Install Latest NuGet
      inputs:
        checkLatest: true

    - task: MSBuild@1
      displayName: Build Projects
      inputs:
        solution: Prism.Container.Extensions.sln
        configuration: $(BuildConfiguration)
        msbuildArguments: '/p:DebugType=portable /p:JavaSdkDirectory="$(JAVA_HOME)" /restore'

    - task: DotNetCoreCLI@2
      displayName: Run Unit Tests
      inputs:
        command: 'test'
        projects: |
          tests\Prism.DryIoc.*\*.csproj
          tests\Prism.Microsoft.DependencyInjection.*\*.csproj
          tests\Prism.Unity.*\*.csproj
          tests\Shiny.Prism.Tests\*.csproj
        arguments: '--no-build --collect "Code Coverage" -c $(BuildConfiguration)'

    - powershell: ./Sign-Packages.ps1
      workingDirectory: build
      displayName: Authenticode Sign Artifacts
      env:
        SignClientUser: $(SignClientUser)
        SignClientSecret: $(SignClientSecret)
        SignClientClientId: $(SignClientClientId)
        SignClientTenantId: $(SignClientTenantId)
        SignServiceResourceId: $(SignServiceResourceId)
      condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))

    - task: PublishPipelineArtifact@1
      displayName: Publish Artifacts
      inputs:
        artifactName: NuGet
        targetPath: $(Build.ArtifactStagingDirectory)

- stage: deploy
  displayName: Deploy NuGets
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: SponsorConnect
    displayName: SponsorConnect.dev
    environment: SponsorConnect
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;$(Pipeline.Workspace)/**/*.snupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'SponsorConnect'

- stage: deployNuGetOrg
  displayName: Deploy NuGets
  dependsOn: deploy
  jobs:
  - deployment: NuGet
    displayName: NuGet.org
    environment: NuGet
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            clean: false

          - powershell: ./Process-Release.ps1
            name: processName
            displayName: Process Artifacts for Release
            workingDirectory: build
            env:
              searchDirectory: $(Pipeline.Workspace)/NuGet

          - task: GithubRelease@0
            displayName: 'Create GitHub Release'
            inputs:
              gitHubConnection: GitHub
              title: '$(ReleaseDisplayName)'
              tagSource: manual
              tag: 'v$(VersionName)'
              isPreRelease: $(IS_PREVIEW)
              assets: '$(Pipeline.Workspace)/**/*.nupkg'
              addChangeLog: true
              isDraft: true

          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;$(Pipeline.Workspace)/**/*.snupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'NuGet'
